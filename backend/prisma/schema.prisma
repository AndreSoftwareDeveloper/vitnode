// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model core_languages {
  id        String  @id @unique @db.VarChar(32)
  name      String  @db.VarChar(255)
  timezone  String  @default("UTC") @db.VarChar(255)
  protected Boolean @default(false)
  default   Boolean @default(false)
  enabled   Boolean @default(true)
  created   Int

  groups                    core_groups_languages[]    @relation("core_groups_languages_language")
  forums_forums_names       forum_forums_names[]       @relation("forums_forums_names_language")
  forums_forums_description forum_forums_description[] @relation("forums_forums_description_language")
  forum_topics_title        forum_topics_title[]       @relation("forum_topics_title_language")
  forum_topics_content      forum_topics_content[]     @relation("forum_topics_content_language")
}

model core_members {
  id                   String            @id @unique @db.VarChar(255)
  name                 String            @unique @db.VarChar(255)
  email                String            @unique @db.VarChar(255)
  password             String            @db.Text
  group                core_groups       @relation("core_members_group", references: [id], fields: [group_id])
  group_id             String
  joined               Int
  avatar               core_attachments? @relation("core_members_avatar", fields: [avatar_id], references: [id])
  avatar_id            String?           @unique @db.VarChar(255)
  cover                core_attachments? @relation("core_members_cover", fields: [cover_id], references: [id])
  cover_id             String?           @unique @db.VarChar(255)
  posts                Int               @default(0)
  followers            Int               @default(0)
  reactions            Int               @default(0)
  newsletter           Boolean           @default(false)
  avatar_color         String            @db.VarChar(6)
  unread_notifications Int               @default(0)

  attachments       core_attachments[]       @relation("core_attachments_member")
  sessions          core_sessions[]          @relation("core_sessions_member")
  admin_sessions    core_admin_sessions[]    @relation("core_admin_sessions_member")
  admin_permissions core_admin_permissions[] @relation("core_admin_permissions_member")
  topics            forum_topics[]           @relation("forum_topics_author")

  @@index([group_id])
}

model core_groups {
  id        String                  @id @unique @default(uuid())
  name      core_groups_languages[] @relation("core_groups_languages_group")
  created   Int
  updated   Int
  protected Boolean                 @default(false)
  default   Boolean                 @default(false)
  root      Boolean                 @default(false)
  guest     Boolean                 @default(false)

  members            core_members[]             @relation("core_members_group")
  admin_permissions  core_admin_permissions[]   @relation("core_admin_permissions_group")
  forums_permissions forum_forums_permissions[] @relation("forums_forums_permissions_group")
}

model core_groups_languages {
  id          String @id @unique @default(uuid())
  id_language String @db.VarChar(32)
  group_id    String
  value       String @db.VarChar(255)

  group    core_groups    @relation("core_groups_languages_group", references: [id], fields: [group_id], onDelete: Cascade)
  language core_languages @relation("core_groups_languages_language", references: [id], fields: [id_language], onDelete: Cascade)

  @@index([id_language])
}

model core_admin_permissions {
  id          String        @id @unique @default(uuid())
  group       core_groups?  @relation("core_admin_permissions_group", references: [id], fields: [group_id], onDelete: Cascade)
  group_id    String?
  member      core_members? @relation("core_admin_permissions_member", references: [id], fields: [member_id], onDelete: Cascade)
  member_id   String?
  permissions String        @db.Text
  created     Int
  updated     Int
}

model core_sessions {
  login_token          String       @id @unique @db.VarChar(255)
  member               core_members @relation("core_sessions_member", references: [id], fields: [member_id], onDelete: Cascade)
  member_id            String
  ip_address           String?      @db.VarChar(46)
  user_agent           String       @db.Text
  uagent_browser       String       @db.VarChar(200)
  uagent_version       String       @db.VarChar(100)
  uagent_os            String       @db.VarChar(100)
  uagent_device_vendor String?      @db.VarChar(200)
  uagent_device_type   String?      @db.VarChar(200)
  uagent_device_model  String?      @db.VarChar(200)
  last_seen            Int
  created              Int
  expires              Int

  @@index([member_id])
}

model core_admin_sessions {
  login_token          String       @id @unique @db.VarChar(255)
  member               core_members @relation("core_admin_sessions_member", references: [id], fields: [member_id], onDelete: Cascade)
  member_id            String
  ip_address           String?      @db.VarChar(46)
  user_agent           String       @db.Text
  uagent_browser       String       @db.VarChar(200)
  uagent_version       String       @db.VarChar(100)
  uagent_os            String       @db.VarChar(100)
  uagent_device_vendor String?      @db.VarChar(200)
  uagent_device_type   String?      @db.VarChar(200)
  uagent_device_model  String?      @db.VarChar(200)
  last_seen            Int
  created              Int
  expires              Int

  @@index([member_id])
}

model core_attachments {
  id          String       @id @default(uuid())
  extension   String       @db.VarChar(50)
  name        String       @db.VarChar(255)
  url         String       @db.VarChar(255)
  member      core_members @relation("core_attachments_member", references: [id], fields: [member_id], onDelete: Cascade)
  member_id   String
  created     Int
  file_size   Int
  position    Int
  description String?      @db.VarChar(255)
  module      String
  module_id   String
  mimetype    String

  members_with_avatar core_members[] @relation("core_members_avatar")
  members_with_cover  core_members[] @relation("core_members_cover")

  @@index([member_id])
}

model forum_forums {
  id             String  @id @unique @default(uuid())
  created        Int
  parent_id      String?
  position       Int
  can_all_view   Boolean @default(false)
  can_all_read   Boolean @default(false)
  can_all_create Boolean @default(false)
  can_all_reply  Boolean @default(false)

  parent      forum_forums?              @relation("forums_forums_parent", references: [id], fields: [parent_id], onDelete: Cascade)
  children    forum_forums[]             @relation("forums_forums_parent")
  name        forum_forums_names[]       @relation("forums_forums_names_forum")
  description forum_forums_description[] @relation("forums_forums_description_forum")
  permissions forum_forums_permissions[] @relation("forums_forums_permissions_forum")
  topics      forum_topics[]             @relation("forum_topics_forum")
}

model forum_forums_names {
  id          String @id @unique @default(uuid())
  id_language String @db.VarChar(32)
  forum_id    String
  value       String @db.VarChar(255)

  forum    forum_forums   @relation("forums_forums_names_forum", references: [id], fields: [forum_id], onDelete: Cascade)
  language core_languages @relation("forums_forums_names_language", references: [id], fields: [id_language], onDelete: Cascade)

  @@index([id_language])
}

model forum_forums_description {
  id          String @id @unique @default(uuid())
  id_language String @db.VarChar(32)
  forum_id    String
  value       String @db.Text

  forum    forum_forums   @relation("forums_forums_description_forum", references: [id], fields: [forum_id], onDelete: Cascade)
  language core_languages @relation("forums_forums_description_language", references: [id], fields: [id_language], onDelete: Cascade)

  @@index([id_language])
}

model forum_forums_permissions {
  id        String       @id @unique @default(uuid())
  forum     forum_forums @relation("forums_forums_permissions_forum", references: [id], fields: [forum_id], onDelete: Cascade)
  forum_id  String
  group     core_groups  @relation("forums_forums_permissions_group", references: [id], fields: [group_id], onDelete: Cascade)
  group_id  String
  can_view  Boolean      @default(false)
  can_read  Boolean      @default(false)
  can_reply Boolean      @default(false)
  can_start Boolean      @default(false)
}

model forum_topics {
  id        String       @id @unique @default(uuid())
  forum     forum_forums @relation("forum_topics_forum", references: [id], fields: [forum_id], onDelete: Cascade)
  forum_id  String
  views     Int          @default(0)
  author    core_members @relation("forum_topics_author", references: [id], fields: [author_id], onDelete: Cascade)
  author_id String
  created   Int
  updated   Int?

  title   forum_topics_title[]   @relation("forum_topics_title_topic")
  content forum_topics_content[] @relation("forum_topics_content_topic")
}

model forum_topics_title {
  id          String @id @unique @default(uuid())
  id_language String @db.VarChar(32)
  topic_id    String
  value       String @db.VarChar(255)

  topic    forum_topics   @relation("forum_topics_title_topic", references: [id], fields: [topic_id], onDelete: Cascade)
  language core_languages @relation("forum_topics_title_language", references: [id], fields: [id_language], onDelete: Cascade)

  @@index([id_language])
}

model forum_topics_content {
  id          String @id @unique @default(uuid())
  id_language String @db.VarChar(32)
  topic_id    String
  value       String @db.Text

  topic    forum_topics   @relation("forum_topics_content_topic", references: [id], fields: [topic_id], onDelete: Cascade)
  language core_languages @relation("forum_topics_content_language", references: [id], fields: [id_language], onDelete: Cascade)
}
